#ifndef IDT_INTERRUPTS_H_
#define IDT_INTERRUPTS_H_

#include <goobos/types.h>

enum Exception_Vector
{
    EXCEPTION_VECTOR_DIVISION_ERROR = 0x0,
    EXCEPTION_VECTOR_DEBUG = 0x1,
    EXCEPTION_VECTOR_NON_MASKABLE_INTERRUPT = 0x2,
    EXCEPTION_VECTOR_BREAKPOINT = 0x3,
    EXCEPTION_VECTOR_OVERFLOW = 0x4,
    EXCEPTION_VECTOR_BOUND_RANGE_EXCEEDED = 0x5,
    EXCEPTION_VECTOR_INVALID_OPCODE = 0x6,
    EXCEPTION_VECTOR_DEVICE_NOT_AVAILABLE = 0x7,
    EXCEPTION_VECTOR_DOUBLE_FAULT = 0x8,
    EXCEPTION_VECTOR_INVALID_TSS = 0xA,
    EXCEPTION_VECTOR_SEGMENT_NOT_PRESENT = 0xB,
    EXCEPTION_VECTOR_STACK_SEGMENT_FAULT = 0xC,
    EXCEPTION_VECTOR_GENERAL_PROTECTION_FAULT = 0xD,
    EXCEPTION_VECTOR_PAGE_FAULT = 0xE,
    EXCEPTION_VECTOR_X87_FLOATING_POINT_EXCEPTION = 0x10,
    EXCEPTION_VECTOR_ALIGNMENT_CHECK = 0x11,
    EXCEPTION_VECTOR_MACHINE_CHECK = 0x12,
    EXCEPTION_VECTOR_SIMD_FLOATING_POINT_EXCEPTION = 0x13,
    EXCEPTION_VECTOR_VIRTUALIZATION_EXCEPTION = 0x14,
    EXCEPTION_VECTOR_CONTROL_PROTECTION_EXCEPTION = 0x15,
    EXCEPTION_VECTOR_HYPERVISOR_INJECTION_EXCEPTION = 0x1C,
    EXCEPTION_VECTOR_VMM_COMMUNICATOR_EXCEPTION = 0x1D,
    EXCEPTION_VECTOR_SECURITY_EXCEPTION = 0x1E,

    EXCEPTION_VECTOR_MAX,
};

const char *exception_vector_to_string(enum Exception_Vector v);

void interrupt_handler(u32 vector);

#endif // IDT_INTERRUPTS_H_
